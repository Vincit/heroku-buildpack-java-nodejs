#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -e

logger -p user.notice -t "slugc[$$]" "language_pack_java java_compile_start"

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
. $BIN_DIR/common

# parse args
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
GLOBAL_CACHE_DIR=/global_cache

# set up used webapp
WEBAPP_RUNNER_VERSION=${WEBAPP_RUNNER_VERSION:-Vincit}

case $WEBAPP_RUNNER_VERSION in
  Vincit)
    echo "-----> Use Vincit's webapp_runner"
    WEBAPP_TARGET_JAR="target/webapp-runner.jar"
    WEBAPP_GIT_URL="https://github.com/Vincit/webapp-runner.git"
    ;;
  heroku)
    echo "-----> Use heroku's webapp_runner"
    WEBAPP_TARGET_JAR="assembly/target/webapp-runner.jar"
    WEBAPP_GIT_URL="https://github.com/heroku/webapp-runner.git"
    ;;
  *)
    echo "-----> Unknown webapp_runner version: ${WEBAPP_RUNNER_VERSION}"
    echo "-----> Using Vincit's version instead"
    WEBAPP_TARGET_JAR="target/webapp-runner.jar"
    WEBAPP_GIT_URL="https://github.com/Vincit/webapp-runner.git"
    ;;
esac

LOGGER_FLAGS=""

export_env_dir $ENV_DIR

JVM_COMMON_BUILDPACK=${JVM_COMMON_BUILDPACK:-https://buildpack-registry.s3.amazonaws.com/buildpacks/heroku/jvm-v91.tgz}
mkdir -p /tmp/jvm-common
curl --silent --location $JVM_COMMON_BUILDPACK | tar xzm -C /tmp/jvm-common --strip-components=1
. /tmp/jvm-common/bin/util
. /tmp/jvm-common/bin/java

KEEP_M2_CACHE="true"

if [ ! -d $CACHE_DIR ]; then
  KEEP_M2_CACHE="false"
elif [ -f $CACHE_DIR/removeM2Cache ]; then
  KEEP_M2_CACHE="false"
fi

if [ "true" == $KEEP_M2_CACHE ]; then
  logger -p user.notice -t "slugc[$$]" "language_pack_java retain_m2_repo"
fi

#create the cache dir if it doesn't exist
mkdir -p $CACHE_DIR

#copy the jdk from cache
if [ -d "$CACHE_DIR/.jdk" ]; then
  echo "-----> Restoring cached JDK"
  cp -r $CACHE_DIR/.jdk $BUILD_DIR/.jdk
fi

# install JDK
javaVersion=$(detect_java_version ${BUILD_DIR})
status_pending "Installing OpenJDK ${javaVersion}"
install_java ${BUILD_DIR} ${javaVersion}
jdk_overlay ${BUILD_DIR}
status_done

#copy the jdk to cache
echo "-----> Caching JDK for future use"
rsync -a $BUILD_DIR/.jdk $CACHE_DIR/

# change to cache dir to install maven
cd $CACHE_DIR

install_maven ${CACHE_DIR} ${BUILD_DIR}

if [ -n "$MAVEN_SETTINGS_PATH" ]; then
  MAVEN_SETTINGS_OPT="-s $MAVEN_SETTINGS_PATH"
elif [ -n "$MAVEN_SETTINGS_URL" ]; then
  status_pending "Installing settings.xml"
  mkdir -p .m2
  curl --silent --max-time 10 --location $MAVEN_SETTINGS_URL --output .m2/settings.xml
  status_done
  MAVEN_SETTINGS_OPT="-s $CACHE_DIR/.m2/settings.xml"
elif [ -f $BUILD_DIR/settings.xml ]; then
  MAVEN_SETTINGS_OPT="-s $BUILD_DIR/settings.xml"
else
  unset MAVEN_SETTINGS_OPT
fi

# symlink from global cache directory
if [ -d $GLOBAL_CACHE_DIR ]; then
  echo "-----> Symlinking global Maven cache"
  rm -rf $CACHE_DIR/.m2
  mkdir -p $GLOBAL_CACHE_DIR/.m2
  ln -s $GLOBAL_CACHE_DIR/.m2 $CACHE_DIR/.m2
fi

########## NODE.JS STUFF ##########

NPM_DIR="" # can be overridden in .env to specify where package.json/node_modules are
test -f $BUILD_DIR/.env && source $BUILD_DIR/.env

if [ ! -f $BUILD_DIR/$NPM_DIR/package.json ]; then
  echo 'PRO TIP: If you have a package.json in your project, you can define its location in .env file. Just add the line:'
  echo 'export NPM_DIR=subdir'
  echo 'where subdir is a relative path to the directory where package.json is.'
  semver_range=""
else
  # Look in package.json's engines.node field for a semver range
  semver_range=$(cat $BUILD_DIR/$NPM_DIR/package.json | $BIN_DIR/../vendor/jq -r .engines.node)

  # Recommend using semver ranges in a safe manner
  if [ "$semver_range" == "null" ]; then
    echo "PRO TIP: Specify a node version in package.json"
    semver_range=""
  elif [ "$semver_range" == "*" ]; then
    echo "PRO TIP: Avoid using semver ranges like '*' in engines.node"
  elif [ ${semver_range:0:1} == ">" ]; then
    echo "PRO TIP: Avoid using semver ranges starting with '>' in engines.node"
  fi
fi

# Resolve node version using semver.io
node_version=$(curl --silent --get --data-urlencode "range=${semver_range}" https://semver.io/node/resolve)

# Output info about requested range and resolved node version
if [ "$semver_range" == "" ]; then
  status "Defaulting to latest stable node: $node_version"
else
  status "Requested node range:  $semver_range"
  status "Resolved node version: $node_version"
fi

# Download node from Heroku's S3 mirror of nodejs.org/dist
if [ ! -f "$CACHE_DIR/node-v$node_version-linux-x64.tar.gz" ]; then
  status "Downloading and installing node (first run)"
  node_url="http://s3pository.heroku.com/node/v$node_version/node-v$node_version-linux-x64.tar.gz"
  curl $node_url -s -o - | tee $CACHE_DIR/node-v$node_version-linux-x64.tar.gz | tar xzf - -C $BUILD_DIR
else
  status "Installing node"
  node_url="http://s3pository.heroku.com/node/v$node_version/node-v$node_version-linux-x64.tar.gz"
  tar xzf $CACHE_DIR/node-v$node_version-linux-x64.tar.gz -C $BUILD_DIR
fi

# Move node (and npm) into ./vendor and make them executable
mkdir -p $BUILD_DIR/vendor/node
rsync -a $BUILD_DIR/node-v$node_version-linux-x64/ $BUILD_DIR/vendor/node/
rm -rf $BUILD_DIR/node-v$node_version-linux-x64
chmod +x $BUILD_DIR/vendor/node/bin/*
PATH=$PATH:$BUILD_DIR/vendor/node/bin

# Add unsafe-perm to global npmrc
mkdir -p $BUILD_DIR/vendor/node/etc
cat << EOF >> $BUILD_DIR/vendor/node/etc/npmrc
unsafe-perm = true
EOF

# symlink from global cache directory
if [ -d $GLOBAL_CACHE_DIR ]; then
  echo "-----> Symlinking global npm cache"
  mkdir -p $GLOBAL_CACHE_DIR/.npm
  rm -rf $BUILD_DIR/.npm
  ln -s $GLOBAL_CACHE_DIR/.npm $BUILD_DIR/.npm

  echo "-----> Symlinking global bower cache"
  mkdir -p $GLOBAL_CACHE_DIR/.cache/bower
  mkdir -p $HOME/.cache
  rm -rf $HOME/.cache/bower
  ln -s $GLOBAL_CACHE_DIR/.cache/bower $HOME/.cache/bower
else
  if test -d $CACHE_DIR/.npm; then
    echo "-----> Restoring npm cache directory from cache"
    cp -r $CACHE_DIR/.npm $BUILD_DIR/.npm
  fi

  if test -d $CACHE_DIR/.cache/bower; then
    echo "-----> Restoring bower cache directory from cache"
    mkdir -p $HOME/.cache
    cp -r $CACHE_DIR/.cache/bower $HOME/.cache/bower
  fi
fi

# Run subsequent node/npm commands from the build path
cd $BUILD_DIR

committed_node_modules_dirs="$(cd "$BUILD_DIR" && find . -type d -name node_modules -not -path '*/node_modules/*' -not -path './vendor/*' | cut -c 3-)"
cached_node_modules_dirs="$(cd "$CACHE_DIR" && find . -type d -name node_modules -not -path '*/node_modules/*' | cut -c 3-)"

# If node_modules directory is checked into source control then
# rebuild any native deps. Otherwise, restore from the build cache.
if [ -n "$committed_node_modules_dirs" ]; then
  echo "$committed_node_modules_dirs" | while read line
  do
    status "Found existing node_modules directory $line"
    status "Rebuilding any native dependencies"
    pushd "$BUILD_DIR/$(dirname "$line")" >/dev/null; npm rebuild 2>&1 | indent; popd >/dev/null
  done
fi

if [ -n "$cached_node_modules_dirs" ]; then
  echo "$cached_node_modules_dirs" | while read line
  do
    if [ ! -d "$BUILD_DIR/$line" ]; then
      status "Restoring $line from cache"
      mkdir -p "$BUILD_DIR/$(dirname "$line")" && cp -r "$CACHE_DIR/$line" "$BUILD_DIR/$line"
      status "Pruning cached dependencies not specified in package.json"
      pushd "$BUILD_DIR/$(dirname "$line")" >/dev/null; npm prune 2>&1 | indent; popd >/dev/null
    fi
  done
fi

########## NODE.JS STUFF ENDS ##########

# change to build dir to run maven
cd $BUILD_DIR

export MAVEN_OPTS="-Xmx1024m"

# build app
maven_profile="staging"
if [ -n "$MAVEN_PROFILE" ]; then
  maven_profile="$MAVEN_PROFILE"
fi

BUILDCMD="$CACHE_DIR/.maven/bin/mvn -B"
BUILDCMD="$BUILDCMD -Duser.home=$BUILD_DIR"
BUILDCMD="$BUILDCMD -Dmaven.repo.local=$CACHE_DIR/.m2/repository"
BUILDCMD="$BUILDCMD $MAVEN_SETTINGS_OPT"
BUILDCMD="$BUILDCMD ${MAVEN_CUSTOM_OPTS:-"-DskipTests=true -Dskip.unit.tests"}"
BUILDCMD="$BUILDCMD -P$maven_profile"
BUILDCMD="$BUILDCMD ${MAVEN_CUSTOM_GOALS:-"package"}"

status "executing $BUILDCMD"

$BUILDCMD 2>&1 | sed -u 's/^/       /'

if [ "${PIPESTATUS[*]}" != "0 0" ]; then
  error "Failed to build app with Maven"
fi

# download webapp-runner
if [ -d $GLOBAL_CACHE_DIR/webapp-runner ]; then
    cd $GLOBAL_CACHE_DIR/webapp-runner
    git pull --ff-only 2>&1 >/dev/null
    cd $BUILD_DIR
    cp -r $GLOBAL_CACHE_DIR/webapp-runner .
else
    git clone "${WEBAPP_GIT_URL}" 2>&1 | sed -u 's/^/        /'

    if [ -d $GLOBAL_CACHE_DIR ]; then
        cp -r webapp-runner $GLOBAL_CACHE_DIR
    fi
fi

cd webapp-runner

BUILDCMD="$CACHE_DIR/.maven/bin/mvn -B"
BUILDCMD="$BUILDCMD -Duser.home=$BUILD_DIR/webapp-runner"
BUILDCMD="$BUILDCMD -Dmaven.repo.local=$CACHE_DIR/.m2/repository"
BUILDCMD="$BUILDCMD -q"
BUILDCMD="$BUILDCMD $MAVEN_SETTINGS_OPT"
BUILDCMD="$BUILDCMD -DskipTests=true"
BUILDCMD="$BUILDCMD -f ./pom.xml"
BUILDCMD="$BUILDCMD package"

status "executing $BUILDCMD"

$BUILDCMD 2>&1 | sed -u 's/^/       /'

mkdir -p ../target/dependency
cp "${WEBAPP_TARGET_JAR}" ../target/dependency/webapp-runner.jar
cd ..
rm -rf webapp-runner

# finalize cache
if [ "false" == $KEEP_M2_CACHE ]; then
  touch $CACHE_DIR/removeM2Cache
fi

installed_node_modules_dirs="$(cd "$BUILD_DIR" >/dev/null && find . -type d -name node_modules -not -path '*/node_modules/*' -not -path './vendor/*' | cut -c 3-)"

echo "$installed_node_modules_dirs" | while read line
do
  status "Caching $line for future builds"
  mkdir -p "$CACHE_DIR/$line" && rsync -a --delete "$BUILD_DIR/$line/" "$CACHE_DIR/$line/"
done

if [ ! -d $GLOBAL_CACHE_DIR ]; then
  echo "-----> Caching npm cache directory for future builds"
  mkdir -p $CACHE_DIR/.npm && [ -d "$BUILD_DIR/.npm/" ] && rsync -a --delete $BUILD_DIR/.npm/ $CACHE_DIR/.npm/

  echo "-----> Caching bower cache directory for future builds"
  mkdir -p $CACHE_DIR/.cache/bower && [ -d "$HOME/.cache/bower/" ] && rsync -a --delete $HOME/.cache/bower/ $CACHE_DIR/.cache/bower/
fi

echo "-----> Cleaning up cache directories"
rm -rf "$BUILD_DIR/.node-gyp"
rm -rf "$BUILD_DIR/.npm"
rm -rf "$HOME/.cache/bower"

logger -p user.notice -t "slugc[$$]" "language_pack_java java_compile_end $LOGGER_FLAGS"
